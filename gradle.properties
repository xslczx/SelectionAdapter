# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
android.enableJetifier=true
android.useAndroidX=true
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true

#签名
signing.keyId=717A44F1
signing.password=123456
signing.secretKeyRingFile=..\\secret.gpg

# ossrh账号信息，如果设置了isSkipCredential=true跳过账号校验，则可以不填
ossrh.username=xslczx
ossrh.password=null

### GAV坐标
publish.groupId=io.github.xslczx

# 如果是android组件并且有flavor，最终生成的artifactId会拼接flavorName信息，拼接规则为artifactId-{flavorName}，可以设置isAppendFavorName为false取消拼接
publish.artifactId=SelectionAdapter

# 版本加SNAPSHOT后缀可发布到maven远程snapshot地址，如1.0.0-SNAPSHOT，如果没有SNAPSHOT后缀则默认发布到maven远程release地址
publish.version=1.0.0

### 下面都是可选信息
# 支持更换发布的仓库地址(release或snapshot)，如果你想发布到私有仓库、本地目录等，可以在这里设置，默认发布到Sonatype OSSRH
# publish.repoReleaseUrl=./repo/release
# publish.repoSnapshotUrl=./repo/snapshot

# 支持二次打包本地aar或jar组件发布到仓库，只要在这里填写组件的本地地址就行，多个组件地址用英文分号;隔开，发布时使用对应的任务
# 二次打包生成的artifactId不使用publish.artifactId指定的，而是使用artifactPath传入的文件名，如这里为lib1、lib2、lib3
# publish.artifactPath=./libs/lib1.aar;./libs/lib2.aar;./libs/lib3.jar

# 如果发布的是android组件，当为false时不根据flavor动态生成组件的artifactId，如果你不想组件的artifactId拼接flavorName，可以设置为false，默认为true
publish.artifactId.isAppendFavorName=false

# 支持跳过签名校验，当为true时不进行签名，如果你发布的组件不想进行gpg签名，可以设置为true，默认为false
publish.isSkipSignature=false

# 支持跳过账号校验，当为true时不进行账号信息校验，如果你的仓库地址不需要账号就能访问，可以设置为true，默认为false
publish.isSkipCredential=false

# 基本描述
publish.description=A simple wrapper for single-select, multi-select and click in RecyclerView.
publish.url=https://github.com/xslczx/SelectionAdapter

# 开发者信息
publish.developerName=xslczx
publish.developerEmail=xslczx@163.com

# license信息
publish.licenseName=The Apache License, Version 2.0
publish.licenseUrl=http://www.apache.org/licenses/LICENSE-2.0.txt

# scm信息，格式参考http://maven.apache.org/scm/scm-url-format.html
publish.scmUrl=https://github.com/xslczx/SelectionAdapter/tree/master
publish.scmConnection=scm:git:git://github.com/xslczx/SelectionAdapter.git
publish.scmDeveloperConnection=scm:git:ssh://github.com:xslczx/SelectionAdapter.git


#发布android组件到maven本地仓库
#./gradlew publishAndroidlibPublicationToMavenLocal

#发布android组件到maven远程release或snapshot仓库
#./gradlew publishAndroidlibPublicationToMavenRepository

#假设android组件含有flavorName为china，发布china版本的android组件到maven本地仓库
#./gradlew publishChinaAndroidlibPublicationToMavenLocal

#假设android组件含有flavorName为oversea， 发布oversea版本的android组件到maven远程release或snapshot仓库
#./gradlew publishOverseaAndroidlibPublicationToMavenRepository

#发布java组件到maven本地仓库
#./gradlew publishJavalibPublicationToMavenLocal

#发布java组件到maven远程release或snapshot仓库
#./gradlew publishJavalibPublicationToMavenRepository

#假设artifactPath指定了lib1.aar、lib2.aar、lib3.jar路径，发布artifactPath指定的aar或到maven本地仓库
#./gradlew publishPackLib1libPublicationToMavenLocal publishPackLib2libPublicationToMavenLocal publishPackLib3libPublicationToMavenLocal

#假设artifactPath指定了lib1.aar、lib2.aar、lib3.jar路径，发布artifactPath指定的aar或jar到maven远程release或snapshot仓库
#./gradlew publishPackLib1libPublicationToMavenRepository publishPackLib2libPublicationToMavenRepository publishPackLib3libPublicationToMavenRepository

#发布所有android组件、java组件和指定的aar或jar到maven本地仓库
#./gradlew publishToMavenLocal

#发布所有android组件、java组件和指定的aar或jar到maven远程release或snapshot仓库
#./gradlew publishAllPublicationsToMavenRepository

#发布所有android组件、java组件和指定的aar或jar到maven本地仓库和maven远程release或snapshot仓库
#./gradlew publish
